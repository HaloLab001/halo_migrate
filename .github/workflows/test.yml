name: CI
on: [push, pull_request]
jobs:
  test:
    strategy:
      matrix:
        pg:
          # - 15
          - 14
          - 13
          - 12
          - 11
          - 10
          - 9.6
    name: 🐘 PostgreSQL ${{ matrix.pg }}
    runs-on: ubuntu-latest
    # container: pgxn/pgxn-tools
    container: ghcr.io/phillbaker/docker-pgxn-tools:latest
    env:
      PROFILE: "-std=c99"
      TEST_PATH: "./bin"
    steps:
      - name: Start PostgreSQL ${{ matrix.pg }}
        run: pg-start ${{ matrix.pg }}
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Add local bin to path
        run: |
          echo "$GITHUB_WORKSPACE/bin" >> $GITHUB_PATH
      - name: Set tablespace to pg user
        run: |
          mkdir -p /tmp/pg-migrate-tablespace
          # if running as root, change the owner to postgres user
          if [ "$(id -u)" = "0" ]; then
            chown postgres:postgres /tmp/pg-migrate-tablespace
          fi
      - name: Test on PostgreSQL ${{ matrix.pg }}
        run: pg-build-test
  release:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: [test]
    name: Release on GitHub and PGXN
    runs-on: ubuntu-latest
    # container: pgxn/pgxn-tools
    container: ghcr.io/phillbaker/docker-pgxn-tools:latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
    steps:
    - name: Check out the repo
      uses: actions/checkout@v2
    - name: Bundle the Release
      id: bundle
      run: pgxn-bundle
    - name: Release on PGXN
      env:
        PGXN_USERNAME: ${{ secrets.PGXN_USERNAME }}
        PGXN_PASSWORD: ${{ secrets.PGXN_PASSWORD }}
      run: pgxn-release
    - name: Create GitHub Release
      id: release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
          # draft: true
          # prerelease: false
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      with:
        # Reference the upload URL and bundle name from previous steps.
        upload_url: ${{ steps.release.outputs.upload_url }}
        asset_path: ./${{ steps.bundle.outputs.bundle }}
        asset_name: ${{ steps.bundle.outputs.bundle }}
        asset_content_type: application/zip
  package:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: [release]
    name: Build Linux Packages
    strategy:
      matrix:
        os: [linux]
        arch: [x86_64]
        format: [deb] # rpm
        pg:
          - 14
          - 13
          - 12
          - 11
          - 10
          - 9.6
    container: ghcr.io/phillbaker/docker-pgxn-tools:latest
    env:
      PG: ${{ matrix.pg }}
      VERSION: ${{ github.ref }}
      ARCH: ${{ matrix.arch }}
      OS: ${{ matrix.os }}
      PROFILE: "-std=c99"
    steps:
      - id: get_version
        uses: battila7/get-version-action@v2
      - run: echo "VERSION=${{ steps.get_version.outputs.version-without-v }}" >> $GITHUB_ENV
      - name: Install PostgreSQL ${{ matrix.pg }}
        run: pg-start ${{ matrix.pg }}
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Install nfpm
        run: |
          echo 'deb [trusted=yes] https://repo.goreleaser.com/apt/ /' | sudo tee /etc/apt/sources.list.d/goreleaser.list
          sudo apt update
          sudo apt-get -y install nfpm
      - name: Build the project
        run: |
          make all
      - name: Build nfpm config file
        run: |
          sudo apt-get -y install --no-install-recommends gettext-base
          envsubst < nfpm.yaml.tmpl > nfpm.yaml
      - name: Build packages
        run: |
          nfpm pkg --packager deb
          mkdir -p deb
          mv *.deb deb/
      - name: Upload deb
        uses: actions/upload-artifact@v3
        with:
            name: deb-${{ github.ref_name }}
            path: deb/*.deb
  package_release:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: [package]
    name: Release Linux Packages
    container: ghcr.io/phillbaker/docker-pgxn-tools:latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Pull
        uses: actions/download-artifact@v3
        with:
          name: deb-${{ github.ref_name }}
          path: deb
      - name: Install apt tools
        run: |
          sudo apt update
          sudo apt-get -y install --no-install-recommends python3-pip python3-apt gnupg apt-utils
      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v4
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
      - name: Push to apt repo
        run: |
          mkdir -p ~/.gnupg
          # use fork with fixes
          pip install git+https://github.com/X4BNet/github-apt-repos.git
          github-apt-repos \
            --github-token ${{ secrets.GITHUB_TOKEN }} \
            --github-apt-repo phillbaker/halo_migrate \
            --gpg-pub-key ./ci/key.gpg.pub \
            --deb-dir=deb \
            --github-release-prefix=release
